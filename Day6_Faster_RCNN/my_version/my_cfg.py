import math
import os

class My_Config:

    def __init__(self):
        # 定义的一些文件路径
        self.BASE_PATH = 'drive/My Drive/AI/Faster_RCNN'
        self.TRAIN_PATH = 'drive/My Drive/AI/Dataset/Open Images Dataset v4 (Bounding Boxes)/person_car_phone_train_annotation.txt'  # Training data (annotation file)

        self.OUTPUT_WEIGHT_PATH = os.path.join(self.BASE_PATH,'model/model_frcnn_vgg.hdf5')
        self.RECORD_PATH = os.path.join(self.BASE_PATH,'model/record.csv')
        self.BASE_WEIGHT_PATH = os.path.join(self.BASE_PATH,'model/vgg16_weights_tf_dim_ordering_tf_kernels.h5')
        self.CONFIG_OUTPUT_FILENAME = os.path.join(self.BASE_PATH,'model_vgg_config.pickle')

        # Print the process or not
        self.verbose = True

        # Name of base network
        self.network = 'vgg'

        # Setting for data augmentation
        self.use_horizontal_flips = True
        self.use_vertical_flips = True
        self.rot_90 = True

        # Anchor box scales
        # Note that if im_size is smaller, anchor_box_scales should be scaled
        # Original anchor_box_scales in the paper is [128, 256, 512]
        self.anchor_box_scales = [64, 128, 256]


        # Anchor box ratios
        self.anchor_box_ratios = [[1, 1],
                             [1./math.sqrt(2), 2./math.sqrt(2)],
                             [2./math.sqrt(2), 1./math.sqrt(2)]]

        # Size to resize the smallest side of the image
        # Original setting in paper is 600. Set to 300 in here to save training time
        self.im_size = 300

        # image channel-wise mean to subtract
        self.img_channel_mean =  [103.939, 116.779, 123.68]
        self.img_scaling_factor = 1.0

        # number of ROIs at once
        self.num_rois = 4

        # stride at the RPN (this depends on the network configuration)
        self.rpn_stride = 16

        self.balanced_classes =  False

        # scaling the stdev
        self.std_scaling = 4.0
        self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

        # overlaps for RPN
        self.rpn_min_overlap = 0.3
        self.rpn_max_overlap = 0.7

        # overlaps for classifier ROIs
        self.classifier_min_overlap = 0.1
        self.classifier_max_overlap = 0.5

        # placeholder for the class mapping, automatically generated by the parser

        self.class_mapping = None

        self.model_path = self.OUTPUT_WEIGHT_PATH
        self.base_net_weights = self.BASE_WEIGHT_PATH

        # 这是自定义的对象，用来存储
        # {'Car': 2383, 'Mobile phone': 1108, 'Person': 3745, 'bg': 0}
        # 的内容
        self.classes_count = None

